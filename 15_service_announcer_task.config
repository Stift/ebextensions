files:
  "C:\\tools\\announcer-service.ps1":
    content: |
      ####################
      # Helper functions #
      ####################

      function Mount-FrontendRoutes {
        param( [System.Object]$whoami )
        $frontendRoutes = @()

        $hsegmentRegexp = "[a-zA-Z0-9;:@&=]+"
        $wildcard = "*"

        foreach($p in $Whoami.roots) {
          $p = $p.Replace($wildcard, $hsegmentRegexp)

          $frontendRoutes += "PathRegexp(``" + $p + "``)"

          if($lastChar -eq "/") {
            $frontendRoutes += "PathRegexp(``" + $p + ".*``)"
          }
        }

        return $frontendRoutes
      }

      # Reads EC2 Instance ID from data file
      $EC2InstanceID = Get-Content C:\tools\EC2InstanceID.dat

      # Reads Beanstalk Elastic Load Balancer DNS name from data file
      $LoadBalancerDNS = Get-Content C:\tools\BeanstalkELBDNSName.dat

      # Gets application whoami and parses it
      $WhoamiJson = (Invoke-WebRequest http://127.0.0.1/meta/whoami -UseBasicParsing).Content
      $Whoami = (ConvertFrom-Json $WhoamiJson)

      # Validates whoami
      if((-not [bool]($Whoami.PSobject.Properties.name -match "app")) -Or
      (-not [bool]($Whoami.PSobject.Properties.name -match "hosts")) -Or
      (-not [bool]($Whoami.PSobject.Properties.name -match "roots")) -Or
      ($Whoami.app -eq "") -Or
      ($Whoami.roots.length -lt 1) -Or
      ($Whoami.hosts.length -lt 1)) {
        throw "Malformed whoami"
      }

      #######################
      # Service definitions #
      #######################
      $appName = $Whoami.app
      $backendType = "http"
      $serverPort = "80"
      $frontendType = "http"
      $backendId = $appName
      $serverId = $EC2InstanceID
      $frontendRoutes = Mount-FrontendRoutes -whoami $Whoami
      $serverURL = $backendType + "://" + $LoadBalancerDNS + ":" + $serverPort
      #######################

      # Backend and server definitions
      $backend = '{\"Type\": \"' + $backendType + '\"}'
      $server = '{\"URL\": \"' + $serverURL + '\"}'

      $backendEtcdPath = "/vulcand/backends/" + $backendId + "/backend"
      $serversEtcdPath = "/vulcand/backends/" + $backendId + "/servers/"
      $serverEtcdPath = $serversEtcdPath + $serverId

      & "C:\ProgramData\etcd\etcdctl.exe" rm --recursive $backendEtcdPath
      & "C:\ProgramData\etcd\etcdctl.exe" rm --recursive $serversEtcdPath

      & "C:\ProgramData\etcd\etcdctl.exe" set $backendEtcdPath $backend
      & "C:\ProgramData\etcd\etcdctl.exe" set $serverEtcdPath $server

      # Frontend definitions
      for($i=0; $i -lt $frontendRoutes.length; $i++) {
        $route = $frontendRoutes[$i]
        $frontendId = $appName + "-f" + $i
        $frontend = '{\"Type\": \"' + $frontendType + '\", \"BackendId\": \"' + $backendId + '\", \"Route\": \"' + $route + '\"}'
        $frontendEtcdPath = "/vulcand/frontends/" + $frontendId + "/frontend"
        & "C:\ProgramData\etcd\etcdctl.exe" rm --recursive $frontendEtcdPath
        & "C:\ProgramData\etcd\etcdctl.exe" set $frontendEtcdPath $frontend
      }

  "C:\\tools\\schedule-service-announcer.ps1":
    content: |
      $taskname = "Service Announcer"
      $script = "C:\tools\announcer-service.ps1"
      $action = New-ScheduledTaskAction -Execute "$pshome\powershell.exe" -Argument "$script"
      $principal = New-ScheduledTaskPrincipal -UserId "NT AUTHORITY\NETWORK SERVICE" -LogonType ServiceAccount -RunLevel Highest
      $repeat = (New-TimeSpan -Minutes 1)
      $duration = ([timespan]::maxvalue)
      $trigger = New-ScheduledTaskTrigger -Once -At (Get-Date).Date -RepetitionInterval $repeat -RepetitionDuration $duration
      $settings = New-ScheduledTaskSettingsSet -DontStopOnIdleEnd
      Register-ScheduledTask -TaskName $taskname -Action $action -Trigger $trigger -Principal $principal

container_commands:
  01_unschedule_announcer-task:
    command: Unannouncer-ScheduledTask -TaskName "Service Announcer" -Confirm:$false
    ignoreErrors: true
    waitAfterCompletion: 0

  02_schedule_announcer-task:
    command: powershell -NoProfile -ExecutionPolicy Bypass -file C:\\tools\\schedule-service-announcer.ps1
    waitAfterCompletion: 0

